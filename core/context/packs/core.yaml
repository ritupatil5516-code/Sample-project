system: |
  You are the planner for a card-account assistant. Map a user question to one
  or more deterministic data calls when the question is about facts
  (what/when/how much), and to a RAG explanation when the user asks
  why/explain/policy. Do not invent data.

glossary:
  - transactions: posted card purchases, credits, adjustments; fields include transactionType, displayTransactionType, amount, transactionDateTime, merchantName.
  - payments: card payments; fields include amount, paymentPostedDateTime, paymentDateTime, state.
  - statements: monthly statement records; fields include closingDateTime, dueDateTime, interestCharged.
  - accounts: account summary; fields include accountStatus, currentBalance, availableCredit, creditLimit, paymentDueDate, purchaseApr.

reasoning:
  - Interpret "last/latest/recent" by sorting on a timestamp and taking the max.
    Prefer postedDateTime > transactionDateTime > paymentPostedDateTime >
    paymentDateTime > closingDateTime when available.
  - YYYY-MM tokens map to period filters; quarters map to YYYY-Q1..Q4.
  - For "last charged interest", first check statements where interestCharged > 0;
    if none, fall back to latest INTEREST transaction in transactions.

planner_contract: |
  Return ONLY a strict JSON object:
  {
    "intent": "string",
    "calls": [
      {
        "domain_id": "transactions|payments|statements|accounts",
        "capability": "get_field|find_latest|sum_where|topk_by_sum|list_where|semantic_search|compare_periods",
        "args": { ... },
        "strategy": "deterministic|rag:unified"
      }
    ],
    "must_produce": [],
    "risk_if_missing": [],
    "strategy": "deterministic|rag:unified"
  }
  - Use strategy "deterministic" for what/when/how much; "rag:unified" only for
    why/explain/policy/fees/handbook.

domains:
  - transactions
  - payments
  - statements
  - accounts

extras:
  - Show money with a currency symbol and two decimals.
  - Normalize dates to YYYY-MM-DD in text.

planner_rules:
  version: 2

  synonyms:
    recency:        ["last", "latest", "recent", "most recent", "recently"]
    period_words:   ["month", "year", "quarter", "cycle", "statement", "period"]
    spend_words:    ["spend", "spent", "purchases", "charges", "debits"]
    refund_words:   ["refund", "refunded", "credit", "reversal", "chargeback"]
    payment_words:  ["payment", "paid", "pay", "remit"]
    list_words:     ["list", "show", "display"]
    tx_words:       ["transaction", "transactions", "purchase", "purchases", "charge", "charges"]
    stmt_words:     ["statement", "cycle", "period", "closing"]
    acct_words:     ["account", "status", "balance", "credit", "limit", "utilization", "apr", "due"]
    merchant_hint:  ["merchant", "store", "vendor", "shop", "at", "from"]
    category_hint:  ["category", "categories"]
    rideshare_words: ["uber", "lyft", "rideshare"]
    subscription_words: ["subscription", "recurring", "renewal"]
    travel_words:   ["travel", "airline", "hotel", "car rental"]
    decline_words:  ["declined", "failed", "rejected"]
    returned_payment_words: ["returned", "failed", "nsf"]
    reversed_words: ["reversed", "chargeback", "dispute"]
    interest:       ["interest", "finance charge", "trailing interest"]
    most:           ["most", "biggest", "largest", "top", "highest"]
    average:        ["average", "avg", "mean"]
    compare:        ["compare", "vs", "versus", "difference"]
    late:           ["late", "past due"]
    why_words:      ["why", "explain", "because", "reason", "policy", "handbook", "agreement", "fees", "interest policy"]

  defaults:
    no_period_for_spend:     "LAST_12M"
    no_period_for_list:      "LAST_12M"
    no_period_for_compare_a: "LAST_MONTH"
    no_period_for_compare_b: "PREV_MONTH"

  routes:

    # ===== Accounts (direct fields) =====
    - name: get_account_status
      must: ["status"]
      call: { domain_id: accounts, capability: get_field, args: { field: accountStatus } }

    - name: get_current_balance
      must: ["balance"]
      call: { domain_id: accounts, capability: get_field, args: { field: currentBalance } }

    - name: get_available_credit
      must: ["credit"]
      call: { domain_id: accounts, capability: get_field, args: { field: availableCredit } }

    - name: credit_limit
      must: ["credit", "limit"]
      call: { domain_id: accounts, capability: get_field, args: { field: creditLimit } }

    - name: minimum_payment_due
      must: ["minimum", "payment"]
      call: { domain_id: accounts, capability: get_field, args: { field: minimumDueAmount } }

    - name: next_payment_due_date
      must: ["due", "payment"]
      call: { domain_id: accounts, capability: get_field, args: { field: paymentDueDate } }

    - name: apr_purchases
      must: ["apr", "purchase"]
      call: { domain_id: accounts, capability: get_field, args: { field: purchaseApr } }

    # ===== Find latest (recency) =====
    - name: latest_transaction
      must: ["recency", "tx_words"]
      call: { domain_id: transactions, capability: find_latest, args: { field: transactionDateTime } }

    - name: latest_payment
      must: ["recency", "payment_words"]
      call: { domain_id: payments, capability: find_latest, args: { field: paymentPostedDateTime } }

    - name: latest_statement_period
      must: ["recency", "stmt_words"]
      call: { domain_id: statements, capability: find_latest, args: { field: closingDateTime } }

    # Interest (deterministic + fallback to interest txn)
    - name: latest_interest_amount
      must: ["recency", "interest"]
      call:
        domain_id: statements
        capability: find_latest
        args:
          field: closingDateTime
          where: { interestCharged: { ">": 0 } }

    - name: latest_interest_tx_fallback
      must: ["recency", "interest"]
      call:
        domain_id: transactions
        capability: find_latest
        args:
          field: transactionDateTime
          where: { transactionType: "INTEREST" }

    # Latest reversal (generic)
    - name: latest_reversal_tx
      must: ["recency", "reversed_words"]
      call:
        domain_id: transactions
        capability: list_where
        args:
          where: { displayTransactionType: "REVERSAL" }
          sort_by: "-transactionDateTime"
          limit: 1

    # ===== Sums & aggregates =====
    - name: spend_in_ym
      must: ["spend_words"]
      may:  ["period_words"]
      call:
        domain_id: transactions
        capability: sum_where
        args:
          where: { period: "${YYYY-MM}" }
          value_path: amount

    - name: spend_this_year
      must: ["spend_words", "year"]
      call:
        domain_id: transactions
        capability: sum_where
        args: { where: { period: "THIS_YEAR" }, value_path: amount }

    - name: spend_last_12m
      must: ["spend_words"]
      call:
        domain_id: transactions
        capability: sum_where
        args: { where: { period: "LAST_12M" }, value_path: amount }

    - name: refunds_this_year
      must: ["refund_words", "year"]
      call:
        domain_id: transactions
        capability: sum_where
        args:
          where: { period: "THIS_YEAR", amountSign: "CREDIT" }
          value_path: amount

    - name: top_merchants_last_12m
      must: ["most", "spend_words"]
      call:
        domain_id: transactions
        capability: topk_by_sum
        args:
          group_key: merchantName
          value_path: amount
          where: { period: "LAST_12M", transactionType: "DEBIT" }
          k: 5

    - name: top_categories_this_year
      must: ["category_hint", "year"]
      call:
        domain_id: transactions
        capability: topk_by_sum
        args:
          group_key: category
          value_path: amount
          where: { period: "THIS_YEAR", transactionType: "DEBIT" }
          k: 5

    - name: biggest_purchase_last_month
      must: ["most", "spend_words", "month"]
      call:
        domain_id: transactions
        capability: list_where
        args:
          where: { period: "LAST_MONTH", transactionType: "DEBIT" }
          sort_by: "-amount"
          limit: 1

    # ===== Listings =====
    - name: list_merchant_last_12m
      must: ["list_words", "merchant_hint"]
      call:
        domain_id: transactions
        capability: list_where
        args:
          where: { period: "LAST_12M", merchant_like: "${MERCHANT}" }
          limit: 50

    - name: list_declined_in_ym
      must: ["list_words", "decline_words"]
      call:
        domain_id: transactions
        capability: list_where
        args:
          where: { period: "${YYYY-MM}", transactionStatus: "DECLINED" }
          limit: 50

    - name: list_reversed_this_year
      must: ["list_words", "reversed_words", "year"]
      call:
        domain_id: transactions
        capability: list_where
        args:
          where: { period: "THIS_YEAR", displayTransactionType: "REVERSAL" }
          limit: 50

    - name: list_payments_q3
      must: ["list_words", "payment_words", "quarter"]
      call:
        domain_id: payments
        capability: list_where
        args:
          where: { period: "${YYYY-Q3}" }
          limit: 50

    - name: list_purchases_over_threshold_last_month
      must: ["list_words", "spend_words", "month"]
      call:
        domain_id: transactions
        capability: list_where
        args:
          where: { period: "LAST_MONTH", min_amount: 200 }
          limit: 50

    # ===== Semantic search (transactions) =====
    - name: sem_apple
      must: ["tx_words"]
      may:  ["merchant_hint"]
      call:
        domain_id: transactions
        capability: semantic_search
        args:
          query: "Apple"
          alternates: ["Apple Services", "Apple Pay"]
          must_include: ["apple"]
          k: 12

    - name: sem_travel_this_year
      must: ["travel_words", "year"]
      call:
        domain_id: transactions
        capability: semantic_search
        args:
          query: "travel purchases"
          alternates: ["airline", "hotel", "car rental"]
          k: 12

    - name: sem_rideshare
      must: ["rideshare_words"]
      call:
        domain_id: transactions
        capability: semantic_search
        args:
          query: "rideshare"
          alternates: ["Uber", "Lyft"]
          k: 12

    - name: sem_subscriptions
      must: ["subscription_words"]
      call:
        domain_id: transactions
        capability: semantic_search
        args:
          query: "subscriptions"
          alternates: ["recurring", "renewal"]
          k: 12

    - name: sem_gift_in_notes
      must: ["tx_words"]
      call:
        domain_id: transactions
        capability: semantic_search
        args:
          query: "gift OR present in memo/notes"
          k: 12

    # ===== Comparisons =====
    - name: compare_last_two_months
      must: ["compare", "spend_words", "month"]
      call:
        domain_id: transactions
        capability: compare_periods
        args: { period1: "LAST_MONTH", period2: "PREV_MONTH" }

    - name: compare_q2_q3
      must: ["compare", "q2", "q3"]
      call:
        domain_id: transactions
        capability: compare_periods
        args: { period1: "${YYYY-Q2}", period2: "${YYYY-Q3}" }

    - name: merchant_totals_month
      must: ["merchant", "totals"]
      call:
        domain_id: transactions
        capability: topk_by_sum
        args:
          group_key: merchantName
          value_path: amount
          where: { period: "${YYYY-MM}" }
          k: 100

    # ===== Ambiguity / edge cases =====
    - name: ambiguous_spend_default_last12m
      must: ["spend_words"]
      call:
        domain_id: transactions
        capability: sum_where
        args:
          where: { period: "LAST_12M" }
          value_path: amount

    - name: ambiguous_largest_purchase_default_ytd
      must: ["most", "spend_words"]
      call:
        domain_id: transactions
        capability: list_where
        args:
          where: { period: "THIS_YEAR" }
          sort_by: "-amount"
          limit: 1

    - name: any_fees
      must: ["fee"]
      call:
        domain_id: transactions
        capability: list_where
        args:
          where: { category_like: "FEE" }
          limit: 50

    - name: abbrev_merchant
      must: ["tx_words"]
      call:
        domain_id: transactions
        capability: semantic_search
        args: { query: "${MERCHANT_ABBREV}", k: 12 }

    - name: none_over_5000_last_month
      must: ["spend_words", "month"]
      call:
        domain_id: transactions
        capability: list_where
        args:
          where: { period: "LAST_MONTH", min_amount: 5000 }
          limit: 50

    - name: reversed_in_ym
      must: ["reversed_words"]
      call:
        domain_id: transactions
        capability: list_where
        args:
          where: { period: "${YYYY-MM}", displayTransactionType: "REVERSAL" }
          limit: 50

    - name: account_owner
      must: ["account", "owner", "name"]
      call:
        domain_id: accounts
        capability: get_field
        args: { field: "persons[0].personName" }

    - name: pending_vs_posted_counts_last_month
      must: ["pending", "posted", "counts", "month"]
      call:
        domain_id: transactions
        capability: list_where
        args:
          where: { period: "LAST_MONTH" }
          aggregate: { posted: { transactionStatus: "POSTED" }, pending: { transactionStatus: "PENDING" } }

    - name: utilization
      must: ["utilization"]
      call:
        domain_id: accounts
        capability: get_field
        args: { field: "__compute__(currentBalance/creditLimit)" }

    # ===== Unified RAG for explanations/policy =====
    - name: explain_interest
      must: ["why_words", "interest"]
      strategy: "rag:unified"
      call: { domain_id: statements, capability: list_where, args: {} }